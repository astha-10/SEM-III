#include <stdio.h>
#include <stdlib.h>

#define SIZE 10

// Structure to represent a hash table entry
struct HashEntry {
    int key;
    int value;
    int occupied;  // Flag to indicate if the slot is occupied
};

// Function to initialize the hash table
void initializeHashTable(struct HashEntry hashTable[], int size) {
    for (int i = 0; i < size; i++) {
        hashTable[i].occupied = 0;
    }
}

// Function to calculate the hash index using quadratic probing
int quadraticProbe(int key, int attempt, int size) {
    return (key + attempt * attempt) % size;
}

// Function to insert a key-value pair into the hash table using quadratic probing
void insertQuadraticHash(struct HashEntry hashTable[], int key, int value, int size) {
    int index = key % size;
    int attempt = 0;

    // Quadratic probing until an empty slot is found
    while (hashTable[index].occupied) {
        attempt++;
        index = quadraticProbe(key, attempt, size);
    }

    // Insert the key-value pair into the hash table
    hashTable[index].key = key;
    hashTable[index].value = value;
    hashTable[index].occupied = 1;

    printf("Key %d with value %d inserted at index %d\n", key, value, index);
}

// Function to display the contents of the hash table
void displayHashTable(struct HashEntry hashTable[], int size) {
    printf("Hash Table Contents:\n");
    for (int i = 0; i < size; i++) {
        if (hashTable[i].occupied) {
            printf("Index %d: Key %d, Value %d\n", i, hashTable[i].key, hashTable[i].value);
        } else {
            printf("Index %d: Empty\n", i);
        }
    }
}

// Main function for testing
int main() {
    struct HashEntry hashTable[SIZE];
    initializeHashTable(hashTable, SIZE);

    insertQuadraticHash(hashTable, 5, 50, SIZE);
    insertQuadraticHash(hashTable, 15, 150, SIZE);
    insertQuadraticHash(hashTable, 25, 250, SIZE);
    insertQuadraticHash(hashTable, 35, 350, SIZE);
    insertQuadraticHash(hashTable, 45, 450, SIZE);

    displayHashTable(hashTable, SIZE);

    return 0;
}
