#include <stdio.h>
#include <stdlib.h>

// Node structure
struct Node {
    int data;
    struct Node* next;
};

// Linked list structure
struct LinkedList {
    struct Node* head;
};

// Function to insert in the middle of the linked list
void insertMiddle(struct LinkedList* list, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;

    if (list->head == NULL) {
        // If the list is empty, insert at the beginning
        list->head = newNode;
    } else {
        struct Node* slow = list->head;
        struct Node* fast = list->head->next;

        // Move the fast pointer two steps and the slow pointer one step
        while (fast != NULL && fast->next != NULL) {
            slow = slow->next;
            fast = fast->next->next;
        }

        // Insert the new node after the slow pointer
        newNode->next = slow->next;
        slow->next = newNode;
    }
}

// Function to delete from the middle of the linked list
void deleteMiddle(struct LinkedList* list) {
    if (list->head == NULL) {
        printf("List is empty. Nothing to delete.\n");
    } else {
        struct Node* slow = list->head;
        struct Node* fast = list->head->next;
        struct Node* previous = NULL;

        // Move the fast pointer two steps and the slow pointer one step
        while (fast != NULL && fast->next != NULL) {
            previous = slow;
            slow = slow->next;
            fast = fast->next->next;
        }

        // Delete the node at the slow pointer
        if (previous == NULL) {
            // If the first half has only one node, delete it
            free(list->head);
            list->head = slow->next;
        } else {
            previous->next = slow->next;
            free(slow);
        }
    }
}

// Function to display the linked list
void display(struct LinkedList* list) {
    struct Node* current = list->head;
    while (current != NULL) {
        printf("%d -> ", current->data);
        current = current->next;
    }
    printf("NULL\n");
}

// Main function for testing
int main() {
    struct LinkedList linkedList;
    int num, choice;

    do {
        printf("\n1. Insert in the middle\n");
        printf("2. Delete from the middle\n");
        printf("3. Display\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter the number to insert: ");
                scanf("%d", &num);
                insertMiddle(&linkedList, num);
                break;
            case 2:
                deleteMiddle(&linkedList);
                break;
            case 3:
                printf("Linked List: ");
                display(&linkedList);
                break;
            case 4:
                printf("Exiting the program.\n");
                break;
            default:
                printf("Invalid choice. Please enter a valid option.\n");
        }
    } while (choice != 4);

    return 0;
}
