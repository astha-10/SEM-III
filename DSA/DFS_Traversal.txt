#include <stdio.h>
#include <stdlib.h>

#define MAX_VERTICES 6

// Stack structure for DFS
struct Stack {
    int items[MAX_VERTICES];
    int top;
};

// Function to initialize an empty stack
void initializeStack(struct Stack* s) {
    s->top = -1;
}

// Function to check if the stack is empty
int isEmpty(struct Stack* s) {
    return s->top == -1;
}

// Function to push a vertex onto the stack
void push(struct Stack* s, int value) {
    if (s->top == MAX_VERTICES - 1) {
        printf("Stack is full. Cannot push.\n");
    } else {
        s->top++;
        s->items[s->top] = value;
    }
}

// Function to pop a vertex from the stack
int pop(struct Stack* s) {
    int item;
    if (isEmpty(s)) {
        printf("Stack is empty. Cannot pop.\n");
        return -1;
    } else {
        item = s->items[s->top];
        s->top--;
        return item;
    }
}

// Graph structure using adjacency matrix
struct Graph {
    int numVertices;
    int adjacencyMatrix[MAX_VERTICES][MAX_VERTICES];
    int visited[MAX_VERTICES];
};

// Function to create a graph with a predefined number of vertices
struct Graph* createGraph() {
    struct Graph* graph = (struct Graph*)malloc(sizeof(struct Graph));
    graph->numVertices = MAX_VERTICES;

    // Initialize the adjacency matrix with zeros
    for (int i = 0; i < MAX_VERTICES; i++) {
        for (int j = 0; j < MAX_VERTICES; j++) {
            graph->adjacencyMatrix[i][j] = 0;
        }
        graph->visited[i] = 0;
    }

    return graph;
}

// Function to add an edge to the graph
void addEdge(struct Graph* graph, int src, int dest) {
    // Adding edge from src to dest
    graph->adjacencyMatrix[src][dest] = 1;
    // Adding edge from dest to src (for undirected graph)
    graph->adjacencyMatrix[dest][src] = 1;
}

// Function to perform DFS traversal of the graph starting from a given vertex
void DFS(struct Graph* graph, int startVertex) {
    struct Stack s;
    initializeStack(&s);

    // Mark the start vertex as visited and push it onto the stack
    graph->visited[startVertex] = 1;
    push(&s, startVertex);

    while (!isEmpty(&s)) {
        // Pop a vertex from the stack and print it
        int currentVertex = pop(&s);
        printf("%d ", currentVertex);

        // Visit all unvisited adjacent vertices of the popped vertex
        for (int i = 0; i < graph->numVertices; i++) {
            if (graph->adjacencyMatrix[currentVertex][i] == 1 && !graph->visited[i]) {
                graph->visited[i] = 1;
                push(&s, i);
            }
        }
    }
}

// Main function for testing
int main() {
    struct Graph* graph = createGraph();

    // Adding edges to create a sample graph
    addEdge(graph, 0, 1);
    addEdge(graph, 0, 2);
    addEdge(graph, 1, 3);
    addEdge(graph, 1, 4);
    addEdge(graph, 2, 5);

    int startVertex = 0;
    printf("DFS Traversal starting from vertex %d: ", startVertex);
    DFS(graph, startVertex);

    free(graph);

    return 0;
}
