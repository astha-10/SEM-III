#include <stdio.h>
#include <stdlib.h>

// Node structure for the singly linked list
struct Node {
    int data;
    struct Node* next;
};

// Stack structure
struct Stack {
    struct Node* top;
};

// Function to initialize an empty stack
void initializeStack(struct Stack* stack) {
    stack->top = NULL;
}

// Function to check if the stack is empty
int isEmpty(struct Stack* stack) {
    return stack->top == NULL;
}

// Function to push a value onto the stack
void push(struct Stack* stack, int value) {
    // Create a new node
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    if (newNode == NULL) {
        printf("Memory allocation failed.\n");
        return;
    }

    // Set the data and link to the current top of the stack
    newNode->data = value;
    newNode->next = stack->top;

    // Update the top of the stack to the new node
    stack->top = newNode;

    printf("%d pushed onto the stack.\n", value);
}

// Function to pop a value from the stack
int pop(struct Stack* stack) {
    if (isEmpty(stack)) {
        printf("Stack is empty. Cannot pop.\n");
        return -1;
    }

    // Get the value from the top of the stack
    int value = stack->top->data;

    // Move the top to the next node
    struct Node* temp = stack->top;
    stack->top = stack->top->next;

    // Free the memory of the popped node
    free(temp);

    return value;
}

// Function to display the elements of the stack
void display(struct Stack* stack) {
    if (isEmpty(stack)) {
        printf("Stack is empty.\n");
        return;
    }

    printf("Stack elements: ");
    struct Node* current = stack->top;
    while (current != NULL) {
        printf("%d ", current->data);
        current = current->next;
    }
    printf("\n");
}

// Main function for testing
int main() {
    struct Stack stack;
    initializeStack(&stack);

    push(&stack, 10);
    push(&stack, 20);
    push(&stack, 30);

    display(&stack);

    int poppedValue = pop(&stack);
    if (poppedValue != -1) {
        printf("Popped value: %d\n", poppedValue);
    }

    display(&stack);

    return 0;
}

